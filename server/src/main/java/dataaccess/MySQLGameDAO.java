package dataaccess;

import chess.ChessGame;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import model.GameData;
import model.GameInfo;

import java.util.HashSet;

import static dataaccess.DatabaseManager.configureDatabase;

public class MySQLGameDAO implements GameDAO{

    public MySQLGameDAO() throws DataAccessException {
        configureDatabase();
    }

    @Override
    public int createGame(String gameName) throws DataAccessException {
        //validate input
        if (anyFieldBlank(gameName)) { throw new DataAccessException("bad request"); }

        //create new chess game
        ChessGame newGame = new ChessGame();

        //serialize chess game
        Gson gson = new GsonBuilder().create();
        String serializedGame = gson.toJson(newGame);
        ChessGame deserializedGame = gson.fromJson(serializedGame, ChessGame.class);

        //create SQL insert statement adding gameName and new ChessGame
        //call executeUpdate inputing statement and objects
            //do I write the null values here?
        //return the value from execute update because it should return the table's autoGenerated gameID

        return 0;
    }

    @Override
    public GameData getGame(int gameID) throws DataAccessException {
        //validate input
        if (anyFieldBlank(gameID)) { throw new DataAccessException("bad request"); }

        return null;
    }

    @Override
    public HashSet<GameInfo> listGames() throws DataAccessException {
        return null;
    }

    @Override
    public void updateGame(int gameID, GameData updatedGame) throws DataAccessException {

    }

    @Override
    public void clear() throws DataAccessException {//hard coded table name, use a reference to table instead?
        DatabaseManager.dropTable("gamedata");
    }

    @Override
    public boolean isEmpty() {
        return true;
    }

    private boolean anyFieldBlank(Object... params) { //TODO: test this function
        boolean returnValue = false;
        for(var param : params){
            if (param == null){
                returnValue = true;
                break;
            }
            switch(param) {
                case String s -> {
                    if (s == null || s.isBlank()) {
                        returnValue = true;
                    }
                }
                case Integer i -> { if(i == null) {returnValue = true;} }
                case GameData g -> {returnValue = anyFieldBlank(g.gameID(),
                                                  g.whiteUsername(),
                                                  g.blackUsername(),
                                                  g.gameName(),
                                                  g.game());}
                case ChessGame cG -> { if(cG == null) {returnValue = true;} }
                default -> returnValue = false;
            }
            if(returnValue) {break;}
        }

        return returnValue;
    }


}
