actor Client
participant Server
participant Handler
participant Service
participant DataAccess
database db

entryspacing 0.9
group #navy Registration #white
==Successfull, happy path==
Client -> Server: [POST] /user\n{"username":" ", "password":" ", "email":" "}
Server -> Handler: {"username":" ", "password":" ", "email":" "}
Handler -> Service: register(RegisterRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db:Find UserData by username
DataAccess --> Service: null
Service -> DataAccess:createUser(userData)
DataAccess -> db:Add UserData
Service -> DataAccess:createAuth(authData)
DataAccess -> db:Add AuthData
Service --> Handler: RegisterResult
Handler --> Server: {"username" : " ", "authToken" : " "}
Server --> Client: 200\n{"username" : " ", "authToken" : " "}

==Failure, bad URL==
Client -> Server: [POST] /use\n{"username":" ", "password":" ", "email":" "}
Server --> Client: 400\n{"message": "Error: bad request"}

==Failure, no username==
Client -> Server: [POST] /user\n{"username", "password":" ", "email":" "}
Server -> Handler: {"username", "password":" ", "email":" "}
Handler --> Server: {"message": "Error: bad request"}
Server --> Client: 400\n{"message": "Error: bad request"}

==Failure, username taken==
Client -> Server: [POST] /user\n{"username":" ", "password":" ", "email":" "}
Server -> Handler: {"username":" ", "password":" ", "email":" "}
Handler -> Service: register(RegisterRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db:Find UserData by username
DataAccess --> Service: UserData
Service --> Handler: RegisterResult
Handler --> Server: {"message": "Error: already taken"}
Server --> Client: 403\n{"message": "Error: already taken"}

==Failure, Error(500): (description of error)==

end


group #orange Login #white
==Successfull, happy path==
Client -> Server: [POST] /session\n{username, password}
Server -> Handler: {username, password}
Handler -> Service: login(LoginRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db: Find UserData by username
DataAccess --> Service UserData
Service -> DataAccess: createAuth(authData)
DataAccess -> db: add AuthData
Service --> Handler: LoginResult
Handler --> Server: {"username":" ", "password":" "}
Server --> Client: 200\n{"username":" ", "authToken":" "}

==Failure, bad username==
Client -> Server: [POST] /session\n{username, password}
Server -> Handler: {username, password}
Handler -> Service: login(LoginRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db: Find UserData by username
DataAccess --> Service: null
Service --> Handler: LoginResult
Handler --> Server: {"message": "Error: unauthorized"}
Server --> Client: 401\n{"message": "Error: unauthorized"}

==Failure, bad password==
Client -> Server: [POST] /session\n{username, password}
Server -> Handler: {username, password}
Handler -> Service: login(LoginRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db: Find UserData by username
DataAccess --> Service: UserData
Service --> Handler: LoginResult
Handler --> Server: {"message": "Error: unauthorized"}
Server --> Client: 401\n{"message": "Error: unauthorized"}

==Failure, Error(500): (description of error)==

end


group #green Logout #white
==Successfull, happy path==
Client -> Server: [DELETE] /session\nauthToken
Server -> Handler: authToken
Handler -> Service: logout(LogoutRequest)
Service -> DataAccess: getAuthData(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: AuthData
Service -> DataAccess: delete(AuthData)
DataAccess -> db: Delete the found AuthData
Service --> Handler: LogoutResult
Handler --> Server: {}
Server --> Client: 200\n{}

==Failure, invalid authToken==
Client -> Server: [DELETE] /session\nauthToken
Server -> Handler: AuthToken
Handler -> Service: logout(LogoutRequest)
Service -> DataAccess: getAuthData(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: null
Service --> Handler: LogoutResult
Handler --> Server: {"message": "Error: unauthorized"}
Server --> Client: 401\n{"message": "Error: unauthorized"}

==Failure, Error(500): (description of error)==

end


group #red List Games #white
==Successfull, happy path==
Client -> Server: [GET] /game\nauthToken
Server -> Handler: AuthToken
Handler -> Service: list(ListRequest)
Service -> DataAccess: getAuthData(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: AuthData
Service -> DataAccess: getGames(AuthData.username)
DataAccess -> db: find user's ChessGames
DataAccess --> Service: list(ChessGames)
Service --> Handler: ListResult
Handler --> Server: { "games": [{"gameID": 1234, "whiteUsername":"", "blackUsername":"", "gameName:""}
Server --> Client: 200\n{ "games": [{"gameID": 1234, "whiteUsername":"", "blackUsername":"", "gameName:""}] }

==Failure, bad authToken==
Client -> Server: [GET] /game\nauthToken
Server -> Handler: AuthToken
Handler -> Service: list(ListRequest)
Service -> DataAccess: getAuthData(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: null
Service --> Handler: ListResult
Handler --> Server: {"message": "Error: unauthorized"}
Server --> Client: 401\n{"message": "Error: unauthorized"}

==Failure, Error(500): (description of error)==

end


group #purple Create Game #white
==Successfull, happy path==
Client -> Server: [POST] /game\nauthToken\n{gameName}
Server -> Handler: authToken\n{gameName}
Handler -> Service: create(CreateRequest)
Service -> DataAccess: getAuthData(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: AuthData
Service -> DataAccess: createGame(AuthData.username)
DataAccess -> db: add ChessGame to database
DataAccess --> Service: ChessGame.gameID
Service --> Handler: CreateResult
Handler --> Server: {"gameID": 1234}
Server --> Client: 200\n{"gameID": 1234}

==Failure, Error(400): bad request==
Client -> Server: [POST] /game\nauthToken\n{gameName}

==Failure, Error(401): unauthorized==
Client -> Server: [POST] /game\nauthToken\n{gameName}
Server -> Handler: authToken\n{gameName}
Handler -> Service: create(CreateRequest)
Service -> DataAccess: getAuthData(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: null
Service --> Handler: CreateResult
Handler --> Server: {"message": "Error: unauthorized"}
Server --> Client: 401\n{"message": "Error: unauthorized"}

==Failure, Error(500): (description of error)==

end


group #yellow Join Game #black
==Successfull, happy path(200)==
Client -> Server: [PUT] /game\nauthToken\n{playerColor, gameID}

==Failure, Error(400): bad request==
Client -> Server: [PUT] /game\nauthToken\n{playerColor, gameID}

==Failure, Error(401): unauthorized==
Client -> Server: [PUT] /game\nauthToken\n{playerColor, gameID}

==Failure, Error(403): already taken==
Client -> Server: [PUT] /game\nauthToken\n{playerColor, gameID}

==Failure, Error(500): (description of error)==
end


group #gray Clear application #white
==Successfull, happy path==
Client -> Server: [DELETE] /db
Server -> Handler: delete()
Handler -> Service: delete()
Service -> DataAccess: clearUserData(), clearGameData(), clearAuthData()
DataAccess -> db: clearUserData(), clearGameData(), clearAuthData()
Service --> Handler: ClearResult
Handler --> Server: {}
Server --> Client: 200\n{}

==Failure, Error(500): (description of error)==
end
