actor Client
participant Server
participant Handler
participant Service
participant DataAccess
database db

entryspacing 0.9
group #navy Registration #white
==Successfull, happy path==
Client -> Server: [POST] /user\n{"username":" ", "password":" ", "email":" "}
Server -> Handler: {"username":" ", "password":" ", "email":" "}
Handler -> Service: register(RegisterRequest)

Service -> DataAccess: getUser(username)
DataAccess -> db:Find UserData by username
DataAccess --> Service: null
Service -> DataAccess:createUser(userData)
DataAccess -> db:Add UserData
Service -> DataAccess:createAuth(authData)
DataAccess -> db:Add AuthData
Service --> Handler: RegisterResult
Handler --> Server: {"username" : " ", "authToken" : " "}
Server --> Client: 200\n{"username" : " ", "authToken" : " "}

==Failure, invalid email==
Client -> Server: [POST] /user\n{"username":" ", "password":" ", "email":" "}
Server -> Handler: {"username":" ", "password":" ", "email":" "}
Handler -> Service: register(RegisterRequest)
Server --> Client: 400\n{"message": "Error: bad request"}

==Failure, weak password==
Client -> Server: [POST] /user\n{"username":" ", "password":" ", "email":" "}
Server -> Handler: {"username":" ", "password":" ", "email":" "}
Handler -> Service: register(RegisterRequest)
Server --> Client: 400\n{"message": "Error: bad request"}

==Failure, username taken==
Client -> Server: [POST] /user\n{"username":" ", "password":" ", "email":" "}
Server -> Handler: {"username":" ", "password":" ", "email":" "}
Handler -> Service: register(RegisterRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db:Find UserData by username
DataAccess --> Service: UserData
Service --> Handler: RegisterResult
Handler --> Server: {"message": "Error: already taken"}
Server --> Client: 403\n{"message": "Error: already taken"}

==Failure, no username==
Client -> Server: [POST] /user\n{"username", "password":" ", "email":" "}
Server -> Handler: {"username", "password":" ", "email":" "}
Handler --> Server: {"message": "Error: (no username)"}
Server --> Client: 500\n{"message": "Error: (no username)"}

==Failure, no password==
Client -> Server: [POST] /user\n{"username": " ", "password", "email":" "}
Server -> Handler: {"username": " ", "password", "email":" "}
Handler --> Server: {"message": "Error: (no password)"}
Server --> Client: 500\n{"message": "Error: (no password)"}

==Failure, no email==
Client -> Server: [POST] /user\n{"username": " ", "password":" ", "email"}
Server -> Handler: {"username":" ", "password":" ", "email"}
Handler --> Server: {"message": "Error: (no email)"}
Server --> Client: 500\n{"message": "Error: (no email)"}

end


group #orange Login #white
==Successfull, happy path==
Client -> Server: [POST] /session\n{username, password}
Server -> Handler: {username, password}
Handler -> Service: login(LoginRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db: Find UserData by username
DataAccess --> Service: UserData
Service -> Service: userData.checkPassword(password)
Service -> DataAccess: createAuth(authData)
DataAccess -> db: add AuthData
Service --> Handler: LoginResult
Handler --> Server: {"username":" ", "password":" "}
Server --> Client: 200\n{"username":" ", "authToken":" "}

==Failure, bad username==
Client -> Server: [POST] /session\n{username, password}
Server -> Handler: {username, password}
Handler -> Service: login(LoginRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db: Find UserData by username
DataAccess --> Service: null
Service --> Handler: LoginResult
Handler --> Server: {"message": "Error: unauthorized"}
Server --> Client: 401\n{"message": "Error: unauthorized"}

==Failure, bad password==
Client -> Server: [POST] /session\n{username, password}
Server -> Handler: {username, password}
Handler -> Service: login(LoginRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db: Find UserData by username
DataAccess --> Service: UserData
Service -> Service: userData.checkPassword(password)
Service --> Handler: LoginResult
Handler --> Server: {"message": "Error: unauthorized"}
Server --> Client: 401\n{"message": "Error: unauthorized"}

==Failure, missing username==
Client -> Server: [POST] /session\n{password}
Server -> Handler: {password}
Handler --> Server: {"message": "Error: (missing username)"}
Server --> Client: 500\n{"message": "Error: (missing username)"}

==Failure, missing password==
Client -> Server: [POST] /session\n{username}
Server -> Handler: {username}
Handler --> Server: {"message": "Error: (missing password)"}
Server --> Client: 500\n{"message": "Error: (missing password)"}

end


group #green Logout #white
==Successfull, happy path==
Client -> Server: [DELETE] /session\nauthToken
Server -> Handler: authToken
Handler -> Service: logout(LogoutRequest)
Service -> DataAccess: getAuthData(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: AuthData
Service -> DataAccess: delete(AuthData)
DataAccess -> db: Delete the found AuthData
Service --> Handler: LogoutResult
Handler --> Server: {}
Server --> Client: 200\n{}

==Failure, invalid authToken==
Client -> Server: [DELETE] /session\nauthToken
Server -> Handler: AuthToken
Handler -> Service: logout(LogoutRequest)
Service -> DataAccess: getAuthData(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: null
Service --> Handler: LogoutResult
Handler --> Server: {"message": "Error: unauthorized"}
Server --> Client: 401\n{"message": "Error: unauthorized"}

==Failure, no authToken==
Client -> Server: [DELETE] /session
Server -> Handler: authToken
Handler --> Server: {"message": "Error: (no authToken provided)"}
Server --> Client: 500\n{"message": "Error: (no authToken provided)"}

end


group #red List Games #white
==Successfull, happy path==
Client -> Server: [GET] /game\nauthToken
Server -> Handler: AuthToken
Handler -> Service: list(ListRequest)
Service -> DataAccess: getAuthData(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: AuthData
Service -> DataAccess: getGames()
DataAccess -> db: get ChessGames
DataAccess --> Service: list(ChessGames)
Service --> Handler: ListResult
Handler --> Server: { "games": [{"gameID": 1234, "whiteUsername":"", "blackUsername":"", "gameName:""}
Server --> Client: 200\n{ "games": [{"gameID": 1234, "whiteUsername":"", "blackUsername":"", "gameName:""}] }

==Failure, bad authToken==
Client -> Server: [GET] /game\nauthToken
Server -> Handler: AuthToken
Handler -> Service: list(ListRequest)
Service -> DataAccess: getAuthData(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: null
Service --> Handler: ListResult
Handler --> Server: {"message": "Error: unauthorized"}
Server --> Client: 401\n{"message": "Error: unauthorized"}

==Failure, no authToken==
Client -> Server: [GET] /game
Server -> Handler: null
Handler --> Server: {"message": "Error: (no authToken provided)"}
Server --> Client: 500\n{"message": "Error: (no authToken provided)"}

end


group #purple Create Game #white
==Successfull, happy path==
Client -> Server: [POST] /game\nauthToken\n{gameName}
Server -> Handler: authToken\n{gameName}
Handler -> Service: create(CreateRequest)
Service -> DataAccess: getAuthData(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: AuthData
Service -> DataAccess: createGame(AuthData.username, gameName)
DataAccess -> db: add ChessGame to database
DataAccess --> Service: ChessGame.gameID
Service --> Handler: CreateResult
Handler --> Server: {"gameID": 1234}
Server --> Client: 200\n{"gameID": 1234}

==Failure, bad authToken==
Client -> Server: [POST] /game\nauthToken\n{gameName}
Server -> Handler: authToken\n{gameName}
Handler -> Service: create(CreateRequest)
Service -> DataAccess: getAuthData(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: null
Service --> Handler: CreateResult
Handler --> Server: {"message": "Error: unauthorized"}
Server --> Client: 401\n{"message": "Error: unauthorized"}

==Failure, missing authToken==
Client -> Server: [POST] /game\n{gameName}
Server -> Handler: {gameName}
Handler --> Server: {"message": "Error: (missing authToken)"}
Server --> Client: 500\n{"message": "Error: (missing authToken)"}

==Failure, missing gameName==
Client -> Server: [POST] /game\nauthToken\n{}
Server -> Handler: authToken
Handler --> Server: {"message": "Error: (missing gameName)"}
Server --> Client: 500\n{"message": "Error: (missing gameName)"}

end


group #yellow Join Game #black
==Successfull, happy path==
Client -> Server: [PUT] /game\nauthToken\n{playerColor, gameID}
Server -> Handler: authToken\n{playerColor, gameID}
Handler -> Service: join(JoinRequest)
Service -> DataAccess: getAuthData(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: AuthData
Service -> DataAccess: getGameData(gameID)
DataAccess -> db: find GameData from gameID
DataAccess --> Service: GameData
Service -> Service: GameData.colorAvailable(playerColor)
Service -> DataAccess: GameData.addPlayer(playerColor, AuthData.getUsername())
DataAccess -> db: update GameData with new player
Service --> Handler: JoinResult
Handler --> Server: {}
Server --> Client: 200\n{}

==Failure, badGameID==
Client -> Server: [PUT] /game\nauthToken\n{playerColor, gameID}
Server -> Handler: authToken\n{playerColor, gameID}
Handler -> Service: join(JoinRequest)
Service -> DataAccess: getAuthData(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: AuthData
Service -> DataAccess: getGameData(gameID)
DataAccess -> db: find GameData from gameID
DataAccess --> Service: null
Service --> Handler: JoinResult
Handler --> Server: {"message": "Error: bad request"}
Server --> Client: 400\n{"message": "Error: bad request"}

==Failure, bad authToken==
Client -> Server: [PUT] /game\nauthToken\n{playerColor, gameID}
Server -> Handler: authToken\n{playerColor, gameID}
Handler -> Service: join(JoinRequest)
Service -> DataAccess: getAuthData(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: null
Service --> Handler: JoinResult
Handler --> Server: {"message": "Error: unauthorized"}
Server --> Client: 401\n{"message": "Error: unauthorized"}

==Failure, game already has \nplayer of provided color==
Client -> Server: [PUT] /game\nauthToken\n{playerColor, gameID}
Server -> Handler: authToken\n{playerColor, gameID}
Handler -> Service: join(JoinRequest)
Service -> DataAccess: getAuthData(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: AuthData
Service -> DataAccess: getGameData(gameID)
DataAccess -> db: find GameData from gameID
DataAccess --> Service: GameData
Service -> Service: GameData.colorAvailable(playerColor)
Service --> Handler: JoinResult
Handler --> Server: {"message": "Error: already taken"}
Server --> Client: 403\n{"message": "Error: already taken"}

==Failure, missing authToken: bad request==
Client -> Server: [PUT] /game\n{playerColor, gameID}
Server -> Handler: \n{playerColor, gameID}
Handler --> Server: {"message": "Error: (missing authToken)"}
Server -> Client: 500\n{"message": "Error: (missing authToken)"}

==Failure, missing playerColor: bad request==
Client -> Server: [PUT] /game\nauthToken\n{gameID}
Server -> Handler: authToken\n{gameID}
Handler --> Server: {"message": "Error: (missing playerColor)"}
Server -> Client: 500\n{"message": "Error: (missing playerColor)"}

==Failure, missing gameID: bad request==
Client -> Server: [PUT] /game\nauthToken\n{playerColor}
Server -> Handler: authToken\n{playerColor}
Handler --> Server: {"message": "Error: (missing gameID)"}
Server -> Client: 500\n{"message": "Error: (missing gameID)"}
end


group #gray Clear application #white
==Successfull, happy path==
Client -> Server: [DELETE] /db
Server -> Handler: delete()
Handler -> Service: delete()
Service -> DataAccess: clearUserData(), clearGameData(), clearAuthData()
DataAccess -> db: clearUserData()
DataAccess -> db: clearGameData()
DataAccess -> db: clearAuthData()
Service --> Handler: ClearResult
Handler --> Server: {}
Server --> Client: 200\n{}
end
